import time
import torch
from torch import nn
from torch.utils.data import DataLoader
from utils import LoadData

from torchvision.models import alexnet  
from torchvision.models import vgg11, vgg13, vgg16, vgg19   
from torchvision.models import resnet18, resnet34,resnet50, resnet101, resnet152   
from torchvision.models import inception_v3  
import os
os.environ['CUDA_VISIBLE_DEVICES'] ='0'

def train(dataloader, model, loss_fn, optimizer):
    size = len(dataloader.dataset)
    
    for batch, (X, y) in enumerate(dataloader):
        
        X, y = X.cuda(), y.cuda()

        
        pred = model(X)

        
        # print(pred,y)
        loss = loss_fn(pred, y)

        
        optimizer.zero_grad()
        loss.backward()
        optimizer.step()

        
        if batch % 10 == 0:
            loss, current = loss.item(), batch * len(X)
            print(f"loss: {loss:>7f}  [{current:>5d}/{size:>5d}]")


def test(dataloader, model):
    size = len(dataloader.dataset)
    
    model.eval()
    
    test_loss, correct = 0, 0
    
    with torch.no_grad():
        
        for X, y in dataloader:
            
            X, y = X.cuda(), y.cuda()
            
            pred = model(X)
            
            test_loss += loss_fn(pred, y).item()
            
            correct += (pred.argmax(1) == y).type(torch.float).sum().item()
    test_loss /= size
    correct /= size
    print(f"correct = {correct}, Test Error: \n Accuracy: {(100*correct):>0.1f}%, Avg loss: {test_loss:>8f} \n")




if __name__=='__main__':
    batch_size = 8

    
    train_data = LoadData("train.txt", True)
    valid_data = LoadData("test.txt", False)


    train_dataloader = DataLoader(dataset=train_data, num_workers=4, pin_memory=True, batch_size=batch_size, shuffle=True)
    test_dataloader = DataLoader(dataset=valid_data, num_workers=4, pin_memory=True, batch_size=batch_size)

    
    device = "cuda" if torch.cuda.is_available() else "cpu"
    print(f"Using {device} device")


   

    #model = alexnet(pretrained=False, num_classes=2).to(device) 

    '''        VGG    '''
    #model = vgg11(pretrained=False, num_classes=2).to(device)   
    #model = vgg13(pretrained=False, num_classes=2).to(device)   
    #model = vgg16(pretrained=False, num_classes=2).to(device)


    '''        ResNet    '''
    # model = resnet18(pretrained=False, num_classes=2).to(device)  
    # model = resnet34(pretrained=False, num_classes=2).to(device)
    # model = resnet50(pretrained= False, num_classes=2).to(device)
    # model = resnet101(pretrained=False, num_classes=2).to(device)   
    # model = resnet152(pretrained=False, num_classes=2).to(device)




    print(model)
    
    loss_fn = nn.CrossEntropyLoss()

    
    optimizer = torch.optim.adam(model.parameters(), lr=1e-3)  # 


   
    epochs = 1
    for t in range(epochs):
        print(f"Epoch {t+1}\n-------------------------------")
        time_start = time.time()
        train(train_dataloader, model, loss_fn, optimizer)
        time_end = time.time()
        print(f"train time: {(time_end-time_start)}")
        test(test_dataloader, model)
    print("Done!")

    
    torch.save(model.state_dict(), "model_resnet101.pth")
    print("Saved PyTorch Model Success!")
